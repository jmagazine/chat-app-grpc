/**
 * @fileoverview gRPC-Web generated client stub for chat
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.1
// source: chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var google_api_annotations_pb = require('./google/api/annotations_pb.js')
const proto = {};
proto.chat = require('./chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.ChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.ChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.CreateUserParams,
 *   !proto.chat.User>}
 */
const methodDescriptor_ChatService_CreateNewUser = new grpc.web.MethodDescriptor(
  '/chat.ChatService/CreateNewUser',
  grpc.web.MethodType.UNARY,
  proto.chat.CreateUserParams,
  proto.chat.User,
  /**
   * @param {!proto.chat.CreateUserParams} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.User.deserializeBinary
);


/**
 * @param {!proto.chat.CreateUserParams} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.createNewUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/CreateNewUser',
      request,
      metadata || {},
      methodDescriptor_ChatService_CreateNewUser,
      callback);
};


/**
 * @param {!proto.chat.CreateUserParams} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.User>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.createNewUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/CreateNewUser',
      request,
      metadata || {},
      methodDescriptor_ChatService_CreateNewUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.DeleteUserByUsernameParams,
 *   !proto.chat.DidDeleteUserMessage>}
 */
const methodDescriptor_ChatService_DeleteUserByUsername = new grpc.web.MethodDescriptor(
  '/chat.ChatService/DeleteUserByUsername',
  grpc.web.MethodType.UNARY,
  proto.chat.DeleteUserByUsernameParams,
  proto.chat.DidDeleteUserMessage,
  /**
   * @param {!proto.chat.DeleteUserByUsernameParams} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.DidDeleteUserMessage.deserializeBinary
);


/**
 * @param {!proto.chat.DeleteUserByUsernameParams} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.DidDeleteUserMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.DidDeleteUserMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.deleteUserByUsername =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/DeleteUserByUsername',
      request,
      metadata || {},
      methodDescriptor_ChatService_DeleteUserByUsername,
      callback);
};


/**
 * @param {!proto.chat.DeleteUserByUsernameParams} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.DidDeleteUserMessage>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.deleteUserByUsername =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/DeleteUserByUsername',
      request,
      metadata || {},
      methodDescriptor_ChatService_DeleteUserByUsername);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.UpdateUserParams,
 *   !proto.chat.User>}
 */
const methodDescriptor_ChatService_UpdateUser = new grpc.web.MethodDescriptor(
  '/chat.ChatService/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.chat.UpdateUserParams,
  proto.chat.User,
  /**
   * @param {!proto.chat.UpdateUserParams} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.User.deserializeBinary
);


/**
 * @param {!proto.chat.UpdateUserParams} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_ChatService_UpdateUser,
      callback);
};


/**
 * @param {!proto.chat.UpdateUserParams} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.User>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_ChatService_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.GetAllUsersParams,
 *   !proto.chat.UsersList>}
 */
const methodDescriptor_ChatService_GetAllUsers = new grpc.web.MethodDescriptor(
  '/chat.ChatService/GetAllUsers',
  grpc.web.MethodType.UNARY,
  proto.chat.GetAllUsersParams,
  proto.chat.UsersList,
  /**
   * @param {!proto.chat.GetAllUsersParams} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.UsersList.deserializeBinary
);


/**
 * @param {!proto.chat.GetAllUsersParams} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.UsersList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.UsersList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.getAllUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/GetAllUsers',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetAllUsers,
      callback);
};


/**
 * @param {!proto.chat.GetAllUsersParams} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.UsersList>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.getAllUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/GetAllUsers',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetAllUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.GetUserByUsernameParams,
 *   !proto.chat.User>}
 */
const methodDescriptor_ChatService_GetUserByUsername = new grpc.web.MethodDescriptor(
  '/chat.ChatService/GetUserByUsername',
  grpc.web.MethodType.UNARY,
  proto.chat.GetUserByUsernameParams,
  proto.chat.User,
  /**
   * @param {!proto.chat.GetUserByUsernameParams} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.User.deserializeBinary
);


/**
 * @param {!proto.chat.GetUserByUsernameParams} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.getUserByUsername =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/GetUserByUsername',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetUserByUsername,
      callback);
};


/**
 * @param {!proto.chat.GetUserByUsernameParams} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.User>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.getUserByUsername =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/GetUserByUsername',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetUserByUsername);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.GetChatMessagesParams,
 *   !proto.chat.ChatMessageList>}
 */
const methodDescriptor_ChatService_GetChatMessages = new grpc.web.MethodDescriptor(
  '/chat.ChatService/GetChatMessages',
  grpc.web.MethodType.UNARY,
  proto.chat.GetChatMessagesParams,
  proto.chat.ChatMessageList,
  /**
   * @param {!proto.chat.GetChatMessagesParams} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.ChatMessageList.deserializeBinary
);


/**
 * @param {!proto.chat.GetChatMessagesParams} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.ChatMessageList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.ChatMessageList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.getChatMessages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/GetChatMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetChatMessages,
      callback);
};


/**
 * @param {!proto.chat.GetChatMessagesParams} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.ChatMessageList>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.getChatMessages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/GetChatMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetChatMessages);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.SendChatMessageParams,
 *   !proto.chat.ChatMessage>}
 */
const methodDescriptor_ChatService_SendChatMessage = new grpc.web.MethodDescriptor(
  '/chat.ChatService/SendChatMessage',
  grpc.web.MethodType.UNARY,
  proto.chat.SendChatMessageParams,
  proto.chat.ChatMessage,
  /**
   * @param {!proto.chat.SendChatMessageParams} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.ChatMessage.deserializeBinary
);


/**
 * @param {!proto.chat.SendChatMessageParams} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.ChatMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.ChatMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.sendChatMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/SendChatMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendChatMessage,
      callback);
};


/**
 * @param {!proto.chat.SendChatMessageParams} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.ChatMessage>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.sendChatMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/SendChatMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendChatMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.DropTableParams,
 *   !proto.chat.DropTableMessage>}
 */
const methodDescriptor_ChatService_DropTable = new grpc.web.MethodDescriptor(
  '/chat.ChatService/DropTable',
  grpc.web.MethodType.UNARY,
  proto.chat.DropTableParams,
  proto.chat.DropTableMessage,
  /**
   * @param {!proto.chat.DropTableParams} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.DropTableMessage.deserializeBinary
);


/**
 * @param {!proto.chat.DropTableParams} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.DropTableMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.DropTableMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.dropTable =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/DropTable',
      request,
      metadata || {},
      methodDescriptor_ChatService_DropTable,
      callback);
};


/**
 * @param {!proto.chat.DropTableParams} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.DropTableMessage>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.dropTable =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/DropTable',
      request,
      metadata || {},
      methodDescriptor_ChatService_DropTable);
};


module.exports = proto.chat;

